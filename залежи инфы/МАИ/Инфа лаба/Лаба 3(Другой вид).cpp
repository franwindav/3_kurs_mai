/**
	Общий принцип работы:

	Два исходных массива заполняются случайными числами
	После этого поочередно передаются в функцию, где исходя из данных этих массивов
	В цикле подсчитывается кол-во и сумма элементов в четных столбцах массива
	Эти данных записываются в переданные по ссылке переменные
	- Это (значение этих переменных) и есть решение задачи

**/

// # - препроцессорные директивы
// Подключаем необходимые заголовочные файлы
#include <iostream>
#include <time.h>
#include <conio.h>

const int ARRAYSIZE = 5;

/*
	Функция типа VOID (не должна возвращать значение) для ...

	@Array	- Вещественный массив
	@size	- Целочисленная переменная задающая размер массива Array, используется для корректно работы цикла
	@count	- Ссылка на переменную под счётчик кол-ва подходящих элементов
	@amount	- Ссылка на переменную под сумму подходящих элементов
*/ 
void Function (double Array[], int size, int &count, int &amount)
{
	for (int i = 0; i < size; i++)
	{
		// % - это деление по модулю. В данном случае по модулю два (проверяем, что столбец чётный)
		// И элемент массива больше нуля
		if (i % 2 == 0 && Array[i] > 0)
		{
			// Прибавляем к текущему значению переменной amount значение текущего элемента массива Array
			// И увеличиваем значение переменной count на единицу
			amount += Array[i];
			count++;
		}
	}

	return;
}


// Точка входа в программу
int main()
{
	// Вызываем функцию srand из заголовочного файла time.h и передаем в качестве аргумента текущий TIMESTAMP
	srand(time(NULL));

	// Создаем и сразу же инициализиуем нулями два целочисленных массива
	int count[2] = {0}, amount[2] = {0};

	// Создаем и сразу же инициализиуем нулями два вещественных массива
	double A[ARRAYSIZE] = {0}, D[ARRAYSIZE] = {0};

	// Цикл с постусловием
	do
	{
		// Очищаем консоль
		system("cls");

		// Заполняем два массива согласно условиям работы случайными числами
		// И выводим значения для анализа и дальнейшей проверки результатов 
		for (int i = 0; i < ARRAYSIZE; i++)
		{
			A[i] = rand() - rand();
			D[i] = rand() - rand();
			printf("%8.1f | %8.1f\n", A[i], D[i]);
		}

		// Вызываем функцию Function и передаем в неё:
		// - Массив случайных чисел
		// - Размер массива
		// - Переменная под счетчик для хранения кол-ва положительных элементов в четных столбцах массива
		// - Переменная для хранения суммы положительных элементов в четных столбцах массива
		// На выходе в массиве iTemp получаем кол-во подряд расположенных положительных чисел в массиве A
		// --------

		Function(A, ARRAYSIZE, count[0], amount[0]);
		Function(D, ARRAYSIZE, count[1], amount[1]);

		// Выводим результаты на консоль
		printf("\ncount[0] = %d\namount[0] = %d\n\ncount[1] = %d\namount[1] = %d\n\n", count[0], amount[0], count[1], amount[1]);

	// Цикл: пока нажатая на клавиатуре кнопка НЕ ESC - начинаем цикл по новой
	} while (_getch() != 27);

	// Конец работы. Завершаем программу с кодом 0 (сигнал об отсутствии ошибок)
	return 0;
}